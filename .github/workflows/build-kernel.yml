# This is a basic workflow to help you get started with Actions

name: Build Kernel

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the regression2 branch
on:
  push:
    branches: [ flicker-free ]
  pull_request:
    branches: [ flicker-free ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install Packages
        run: |
          sudo apt update
          sudo apt install -y build-essential

      # Runs a set of commands using the runners shell
      - name: Download buildtools
        run: |
          cd ~
          git clone https://github.com/kdrag0n/proton-clang.git -b 20200808 --depth=1
          
      - name: Build With Shell
        run: |
            cd ${GITHUB_WORKSPACE}
            export args="-j2 \
            O=out \
            ARCH=arm64 \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=${HOME}/proton-clang/bin/aarch64-linux-gnu- \
            CC=${HOME}/proton-clang/bin/clang \
            LD=${HOME}/proton-clang/bin/ld.lld \
            AR=${HOME}/proton-clang/bin/llvm-ar \
            NM=${HOME}/proton-clang/bin/llvm-nm \
            OBJCOPY=${HOME}/proton-clang/bin/llvm-objcopy \
            OBJDUMP=${HOME}/proton-clang/bin/llvm-objdump \
            STRIP=${HOME}/proton-clang/bin/llvm-strip \
            CROSS_COMPILE_ARM32=${HOME}/proton-clang/bin/arm-linux-gnueabi- "
            make clean
            make mrproper
            make ${args} weeb_defconfig
            make ${args}

      - name: Upload Image.gz-dtb
        uses: actions/upload-artifact@v2
        with:
          name: Image.gz-dtb
          path: ${{ github.workspace }}/out/arch/arm64/boot/Image.gz-dtb
